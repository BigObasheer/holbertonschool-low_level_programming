!<arch>
0-isupper.c/    1583084162  1000  1000  100664  220       `
#include "holberton.h"

/**
 * _isupper - checks for upper case letter
 * @c: letter
 * Return: 1 for uppercase 0 for lowercase
 */

int _isupper(int c)

{
	if (c >= 'A' && c <= 'Z')
		return (1);

	else
		return (0);
}
0-memset.c/     1583084162  1000  1000  100664  318       `
#include "holberton.h"

/**
 * _memset - function that fills memory with a constant byte.
 * @s: pointer
 * @b: contant byte
 * @n: number of bytes
 * Return: pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     1583084162  1000  1000  100664  366       `
#include "holberton.h"

/**
 * _strcat - concatenates two strings
 * @dest: string 1
 * @src: string 2
 *
 * Return: combined two strings
 */

char *_strcat(char *dest, char *src)
{
	int i, j;
	char *d1 = dest;
	char *s1 = src;

	for (i = 0; d1[i] != ('\0'); i++)
	{
	}
	for (j = 0; s1[j] != ('\0'); j++, i++)
	{
		d1[i] = s1[j];
	}
	d1[i] = ('\0');
	return (d1);
}
100-atoi.c/     1583084162  1000  1000  100664  521       `
#include "holberton.h"
#include <stdio.h>

/**
 * _atoi - function that convert a string to an integer
 * @s: string
 * Return: int
 */

int _atoi(char *s)
{
	int num, neg, i;

	neg = 1;
	i = num = 0;
	while ((s[i] < '0' || s[i] > '9') && s[i] != 0)
	{
		if (s[i] == '-')
			neg = neg * -1;
		i++;
	}
	while ((s[i] >= '0' && s[i] <= '9') && s[i] != 0)
	{
		if (num >= 0)
		{
			num = num * 10 - (s[i] - '0');
			i++;
		}
		else
		{
			num = num * 10 - (s[i] - '0');
			i++;
		}
	}
	neg = neg * -1;
	return (num * neg);
}

1-isdigit.c/    1583084162  1000  1000  100664  204       `
#include "holberton.h"

/**
 * _isdigit - checks for digit
 * @c: character
 * Return: 1 for digit, 0 otherwise
 */

int _isdigit(int c)

{
	if (c >= '0' && c <= '9')
		return (1);

	else
		return (0);
}
1-memcpy.c/     1583084162  1000  1000  100664  312       `
#include "holberton.h"

/**
 * _memcpy - function that copies memory area
 * @dest: destination
 * @src: source
 * @n: number of bytes
 *
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    1583084162  1000  1000  100664  386       `
#include "holberton.h"

/**
 * _strncat - concatenates two strings
 * @dest: string 1
 * @src: string 2
 * @n: bytes from src
 * Return: combined two strings
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;
	char *d1 = dest;
	char *s1 = src;

	for (i = 0; d1[i] != ('\0'); i++)
	{
	}
	for (j = 0; j < n && s1[j] != ('\0'); j++, i++)
	{
		d1[i] = s1[j];
	}
	return (d1);
}
2-strchr.c/     1583084162  1000  1000  100664  315       `
#include "holberton.h"

/**
 * _strchr - function that locates a character in a string
 * @s: string
 * @c: character c
 * Return: rest of string from character s
 */

char *_strchr(char *s, char c)
{

	for (; *s; s++)
	{
		if (*s == c)
		{
			return (s);
		}
	}
	if (*s == c)
	{
		return (s);
	}
	return ('\0');
}

2-strlen.c/     1583084162  1000  1000  100664  198       `
#include "holberton.h"

/**
 * _strlen - returns the length of a string.
 * @s: string
 * Return: void
 */

int _strlen(char *s)
{
	int i;

	for (i = 0; *s != '\0'; i++)
	{
		s++;
	}
	return (i);
}
2-strchr.c/     1583084162  1000  1000  100664  315       `
#include "holberton.h"

/**
 * _strchr - function that locates a character in a string
 * @s: string
 * @c: character c
 * Return: rest of string from character s
 */

char *_strchr(char *s, char c)
{

	for (; *s; s++)
	{
		if (*s == c)
		{
			return (s);
		}
	}
	if (*s == c)
	{
		return (s);
	}
	return ('\0');
}

3-islower.c/    1583084162  1000  1000  100664  220       `
#include "holberton.h"

/**
 * _islower - checks for lower case letter
 * @c: letter
 * Return: 0 for uppercase 1 for lowercase
 */

int _islower(int c)

{
	if (c >= 'a' && c <= 'z')
		return (1);

	else
		return (0);
}
3-puts.c/       1583084162  1000  1000  100664  217       `
#include "holberton.h"

/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: string
 * Return: void
 */

void _puts(char *str)
{
	while (*str)
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     1583084162  1000  1000  100664  406       `
#include "holberton.h"

/**
 * _strcmp - function that compares two strings
 * @s1: string 1
 * @s2: string 2
 * Return: an integer
 */

int _strcmp(char *s1, char *s2)
{
	char *s3 = s1;
	char *s4 = s2;

	while (*s3 == *s4)
	{
		if (*s3 == '\0' || *s4 == '\0')
			break;
		s3++;
		s4++;
	}
	if (*s3 > *s4)
	{
		return (*s3 - *s4);
	}
	if (*s3 < *s4)
	{
		return (*s3 - *s4);
	}
	else
	{
		return (0);
	}
}
3-strspn.c/     1583084162  1000  1000  100664  482       `
#include "holberton.h"

/**
 * _strspn - function that gets the length of a prefix substring
 * @s: string
 * @accept: bytes contanied in string
 * Return: the number of bytes of accept
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int x, y;
	unsigned int count = 0;

	for (x = 0; s[x] != '\0'; x++)
	{
		for (y = 0; accept[y] != '\0'; y++)
		{
			if (s[x] == accept[y])
			{
				count++;
				break;
			}
		}
		if (x > count)
			return (count);
	}
	return (count);
}
4-isalpha.c/    1583084162  1000  1000  100664  224       `
#include "holberton.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: character
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	if (c >= 'A' && c <= 'z')
		return (1);

	else
		return (0);
}
4-strpbrk.c/    1583084162  1000  1000  100664  359       `
#include "holberton.h"

/**
 * _strpbrk - function that searches a string for any of a set of bytes.
 * @s: string
 * @accept: accept
 * Return: pointer to the byte in s
 */

char *_strpbrk(char *s, char *accept)
{
	unsigned int i;

	for (; *s != '\0'; s++)
	{
		for (i = 0; accept[i]; i++)
			if (*s == accept[i])
			{
				return (s);
			}
	}
	return (0);
}

5-strstr.c/     1583084551  1000  1000  100664  408       `
#include "holberton.h"

/**
 * _strstr - function that locates a substring
 * @haystack: string
 * @needle: string to be returned
 * Return: Returns a pointer to the beginning of the located substring
 */

char *_strstr(char *haystack, char *needle)
{
	int i;

	for (i = 0; *haystack; haystack++)
	{
		for (i = 0; haystack[i] == needle[i]; i++)
			;
		if (!needle[i])
			return (haystack);
	}
	return (0);
}
6-abs.c/        1583084162  1000  1000  100664  185       `
#include "holberton.h"

/**
 * _abs - computes the absolute value of an integer
 * @n: integer
 * Return: n
 */

int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (n * -1);
}

9-strcpy.c/     1583084162  1000  1000  100664  469       `
#include "holberton.h"

/**
 * _strcpy -  function that copies the string pointed to by src, to dest
 * @dest: destination
 * @src: source
 * Return: Always 0.
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; i <= _strlen(src); i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

/**
 * _strlen - returns the length of a string.
 * @s: string
 * Return: void
 */

int _strlen(char *s)
{
	int i;

	for (i = 0; *s != '\0'; i++)
	{
		s++;
	}
	return (i);
}

_putchar.c/     1583084294  1000  1000  100664  247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

